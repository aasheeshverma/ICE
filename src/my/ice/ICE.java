/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package my.ice;

import java.awt.Font;
import java.awt.Frame;
import java.awt.GraphicsConfiguration;
import java.awt.Window;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.DocumentFilter;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import javax.swing.undo.UndoManager;
import sun.applet.Main;

/**
 *
 * @author ak
 */
public class ICE extends javax.swing.JFrame {

    /**
     * Creates new form ICE
     */
    public ICE() {
        initComponents();
        initComponents2();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        langButtonGroup = new javax.swing.ButtonGroup();
        fileChooser1 = new javax.swing.JFileChooser();
        fileChooser2 = new javax.swing.JFileChooser();
        fileChooser3 = new javax.swing.JFileChooser();
        fileChooser5 = new javax.swing.JFileChooser();
        fileChooser6 = new javax.swing.JFileChooser();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        basePanel = new javax.swing.JPanel();
        runPanel = new javax.swing.JPanel();
        compileButton = new javax.swing.JButton();
        runButton = new javax.swing.JButton();
        templateButton = new javax.swing.JButton();
        editorInternalFrame = new javax.swing.JInternalFrame();
        editorTabbedPane = new javax.swing.JTabbedPane();
        consoleInternalFrame = new javax.swing.JInternalFrame();
        consoleScrollPane = new javax.swing.JScrollPane();
        consoleTabbedPane = new javax.swing.JTabbedPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        errorTextArea = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        inputTextArea = new javax.swing.JTextArea();
        jScrollPane7 = new javax.swing.JScrollPane();
        outputTextArea = new javax.swing.JTextArea();
        timePanel = new javax.swing.JPanel();
        timeLabel = new javax.swing.JLabel();
        timeScrollPane = new javax.swing.JScrollPane();
        timeTextArea = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        claLabel = new javax.swing.JLabel();
        inpFileLabel = new javax.swing.JLabel();
        claTextField = new javax.swing.JTextField();
        templateTextField = new javax.swing.JTextField();
        browseTemplateButton = new javax.swing.JButton();
        inpFileTextField = new javax.swing.JTextField();
        browseipButton = new javax.swing.JButton();
        templateLabel = new javax.swing.JLabel();
        runipPanel = new javax.swing.JPanel();
        runipButton = new javax.swing.JButton();
        genopButton = new javax.swing.JButton();
        genipButton = new javax.swing.JButton();
        langPanel = new javax.swing.JPanel();
        langComboBox = new javax.swing.JComboBox();
        terminateButton = new javax.swing.JButton();
        notesLabel = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        notesTextArea = new javax.swing.JTextArea();
        mainMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        closeMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        undoMenuItem = new javax.swing.JMenuItem();
        redoMenuItem = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        themesMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        readmeMenuItem = new javax.swing.JMenuItem();
        aboutMeMenuItem1 = new javax.swing.JMenuItem();

        fileChooser1.setDialogTitle("Open");
        fileChooser1.setPreferredSize(new java.awt.Dimension(750, 500));

        fileChooser2.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        fileChooser2.setDialogTitle("Save");
        fileChooser2.setPreferredSize(new java.awt.Dimension(750, 500));

        fileChooser3.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        fileChooser3.setDialogTitle("Save Output File");
        fileChooser3.setPreferredSize(new java.awt.Dimension(750, 500));

        fileChooser5.setDialogTitle("Select input File");
        fileChooser5.setPreferredSize(new java.awt.Dimension(750, 500));

        fileChooser6.setDialogTitle("Select Template Folder");
        fileChooser6.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        fileChooser6.setPreferredSize(new java.awt.Dimension(750, 500));

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList1);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane4.setViewportView(jTextArea2);

        jScrollPane8.setViewportView(jTextPane1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("The Melting ICE");

        runPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(183, 183, 183)));
        runPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        compileButton.setText("Compile Code");
        compileButton.setToolTipText("");
        compileButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        compileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compileButtonActionPerformed(evt);
            }
        });

        runButton.setText("Run Manually");
        runButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        templateButton.setText("Templates");
        templateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                templateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout runPanelLayout = new javax.swing.GroupLayout(runPanel);
        runPanel.setLayout(runPanelLayout);
        runPanelLayout.setHorizontalGroup(
            runPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(runPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(runPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(compileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(runButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(templateButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(6, 6, 6))
        );
        runPanelLayout.setVerticalGroup(
            runPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(runPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(compileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(runButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(templateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        editorInternalFrame.setTitle("TEXT EDITOR");
        editorInternalFrame.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        editorInternalFrame.setPreferredSize(new java.awt.Dimension(500, 600));
        editorInternalFrame.setVisible(true);

        editorTabbedPane.setBorder(null);
        editorTabbedPane.setPreferredSize(new java.awt.Dimension(300, 100));

        javax.swing.GroupLayout editorInternalFrameLayout = new javax.swing.GroupLayout(editorInternalFrame.getContentPane());
        editorInternalFrame.getContentPane().setLayout(editorInternalFrameLayout);
        editorInternalFrameLayout.setHorizontalGroup(
            editorInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(editorTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 614, Short.MAX_VALUE)
        );
        editorInternalFrameLayout.setVerticalGroup(
            editorInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(editorTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        consoleInternalFrame.setTitle("CONSOLE");
        consoleInternalFrame.setVisible(true);

        consoleTabbedPane.setBorder(null);

        errorTextArea.setEditable(false);
        errorTextArea.setColumns(20);
        errorTextArea.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        errorTextArea.setLineWrap(true);
        errorTextArea.setRows(5);
        errorTextArea.setTabSize(4);
        errorTextArea.setWrapStyleWord(true);
        errorTextArea.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        errorTextArea.setMinimumSize(new java.awt.Dimension(100, 18));
        jScrollPane5.setViewportView(errorTextArea);

        consoleTabbedPane.addTab("tab1", jScrollPane5);

        inputTextArea.setColumns(20);
        inputTextArea.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        inputTextArea.setLineWrap(true);
        inputTextArea.setRows(5);
        inputTextArea.setTabSize(4);
        inputTextArea.setWrapStyleWord(true);
        inputTextArea.setMinimumSize(new java.awt.Dimension(100, 18));
        jScrollPane6.setViewportView(inputTextArea);

        consoleTabbedPane.addTab("tab2", jScrollPane6);

        outputTextArea.setEditable(false);
        outputTextArea.setColumns(20);
        outputTextArea.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        outputTextArea.setLineWrap(true);
        outputTextArea.setRows(5);
        outputTextArea.setTabSize(4);
        outputTextArea.setWrapStyleWord(true);
        outputTextArea.setMinimumSize(new java.awt.Dimension(100, 18));
        jScrollPane7.setViewportView(outputTextArea);

        consoleTabbedPane.addTab("tab3", jScrollPane7);

        consoleScrollPane.setViewportView(consoleTabbedPane);

        javax.swing.GroupLayout consoleInternalFrameLayout = new javax.swing.GroupLayout(consoleInternalFrame.getContentPane());
        consoleInternalFrame.getContentPane().setLayout(consoleInternalFrameLayout);
        consoleInternalFrameLayout.setHorizontalGroup(
            consoleInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(consoleScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)
        );
        consoleInternalFrameLayout.setVerticalGroup(
            consoleInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(consoleScrollPane, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        timePanel.setBorder(null);

        timeLabel.setText("Time Elapsed");

        timeTextArea.setEditable(false);
        timeTextArea.setColumns(20);
        timeTextArea.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        timeTextArea.setLineWrap(true);
        timeTextArea.setRows(4);
        timeTextArea.setTabSize(3);
        timeScrollPane.setViewportView(timeTextArea);

        javax.swing.GroupLayout timePanelLayout = new javax.swing.GroupLayout(timePanel);
        timePanel.setLayout(timePanelLayout);
        timePanelLayout.setHorizontalGroup(
            timePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(timePanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(timeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(timeScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        timePanelLayout.setVerticalGroup(
            timePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, timePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(timeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(timeScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        claLabel.setText("CLAs");

        inpFileLabel.setText("Input File");

        claTextField.setColumns(5);
        claTextField.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        claTextField.setMaximumSize(new java.awt.Dimension(300, 27));
        claTextField.setMinimumSize(new java.awt.Dimension(100, 27));

        templateTextField.setEditable(false);
        templateTextField.setColumns(5);
        templateTextField.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        templateTextField.setMaximumSize(new java.awt.Dimension(300, 27));
        templateTextField.setMinimumSize(new java.awt.Dimension(100, 27));

        browseTemplateButton.setText("Browse");
        browseTemplateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseTemplateButtonActionPerformed(evt);
            }
        });

        inpFileTextField.setEditable(false);
        inpFileTextField.setColumns(5);
        inpFileTextField.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        inpFileTextField.setMaximumSize(new java.awt.Dimension(300, 27));
        inpFileTextField.setMinimumSize(new java.awt.Dimension(100, 27));

        browseipButton.setText("Browse");
        browseipButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseipButtonActionPerformed(evt);
            }
        });

        templateLabel.setText("Template Folder");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(claLabel)
                .addGap(1, 1, 1)
                .addComponent(claTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(templateLabel)
                .addGap(0, 0, 0)
                .addComponent(templateTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(browseTemplateButton)
                .addGap(18, 18, 18)
                .addComponent(inpFileLabel)
                .addGap(0, 0, 0)
                .addComponent(inpFileTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(browseipButton)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(claTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inpFileLabel)
                    .addComponent(inpFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseipButton)
                    .addComponent(claLabel)
                    .addComponent(templateLabel)
                    .addComponent(templateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseTemplateButton))
                .addGap(2, 2, 2))
        );

        runipPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(183, 183, 183)));

        runipButton.setText("Run Using File");
        runipButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        runipButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runipButtonActionPerformed(evt);
            }
        });

        genopButton.setText("Create o/p File");
        genopButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        genopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genopButtonActionPerformed(evt);
            }
        });

        genipButton.setText("Create i/p File");
        genipButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        genipButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genipButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout runipPanelLayout = new javax.swing.GroupLayout(runipPanel);
        runipPanel.setLayout(runipPanelLayout);
        runipPanelLayout.setHorizontalGroup(
            runipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, runipPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(runipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(genipButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(runipButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(genopButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(6, 6, 6))
        );
        runipPanelLayout.setVerticalGroup(
            runipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(runipPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(genipButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(runipButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(genopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        langPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(183, 183, 183)));

        langComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "C", "C++", "Java" }));
        langComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                langComboBoxActionPerformed(evt);
            }
        });

        terminateButton.setText("Terminate");
        terminateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                terminateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout langPanelLayout = new javax.swing.GroupLayout(langPanel);
        langPanel.setLayout(langPanelLayout);
        langPanelLayout.setHorizontalGroup(
            langPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(langPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(langPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(terminateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(langComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(6, 6, 6))
        );
        langPanelLayout.setVerticalGroup(
            langPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(langPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(terminateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(langComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        notesLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        notesLabel.setText("Notes");

        jScrollPane9.setViewportView(notesTextArea);

        javax.swing.GroupLayout basePanelLayout = new javax.swing.GroupLayout(basePanel);
        basePanel.setLayout(basePanelLayout);
        basePanelLayout.setHorizontalGroup(
            basePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(basePanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(basePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(basePanelLayout.createSequentialGroup()
                        .addComponent(editorInternalFrame, javax.swing.GroupLayout.DEFAULT_SIZE, 616, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(consoleInternalFrame)
                        .addGap(0, 0, 0)
                        .addGroup(basePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(runPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(runipPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(timePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(langPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(notesLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane9, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addGap(0, 0, 0))
        );
        basePanelLayout.setVerticalGroup(
            basePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(basePanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(basePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(basePanelLayout.createSequentialGroup()
                        .addComponent(langPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(runPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(runipPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(timePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(notesLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE))
                    .addComponent(consoleInternalFrame)
                    .addComponent(editorInternalFrame, javax.swing.GroupLayout.DEFAULT_SIZE, 636, Short.MAX_VALUE))
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        jScrollPane1.setViewportView(basePanel);

        fileMenu.setText("File");

        newMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newMenuItem.setText("New");
        newMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newMenuItem);

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        saveAsMenuItem.setText("Save As");
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);

        closeMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        closeMenuItem.setText("Close");
        closeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(closeMenuItem);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        mainMenuBar.add(fileMenu);

        editMenu.setText("Edit");

        undoMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        undoMenuItem.setText("Undo");
        undoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(undoMenuItem);

        redoMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        redoMenuItem.setText("Redo");
        redoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(redoMenuItem);

        mainMenuBar.add(editMenu);

        viewMenu.setText("View");

        themesMenuItem.setText("Themes");
        themesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                themesMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(themesMenuItem);

        mainMenuBar.add(viewMenu);

        helpMenu.setText("Help");

        readmeMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        readmeMenuItem.setText("Open readme");
        readmeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readmeMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(readmeMenuItem);

        aboutMeMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        aboutMeMenuItem1.setText("About");
        aboutMeMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMeMenuItem1ActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMeMenuItem1);

        mainMenuBar.add(helpMenu);

        setJMenuBar(mainMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 672, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
   
    private void initComponents2() {
        fileChooser1.addChoosableFileFilter(new TextCustomFilter());
        fileChooser1.addChoosableFileFilter(new CppCustomFilter());
        fileChooser1.addChoosableFileFilter(new JavaCustomFilter());
        fileChooser5.addChoosableFileFilter(new TextCustomFilter());
        addCutMenuItem();
        addCopyMenuItem();
        addPasteMenuItem();
        consoleTabbedPane.setTitleAt(0,"   Error   ");
        consoleTabbedPane.setTitleAt(1,"   Input   ");
        consoleTabbedPane.setTitleAt(2,"   Output   ");
        notesTextArea.setLineWrap(true);
        notesTextArea.setWrapStyleWord(true);
        notesTextArea.setColumns(5);
        notesTextArea.setFont(new java.awt.Font("SansSerif", 0, 14));
    }
    
    private void compileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compileButtonActionPerformed
        if(editorTabbedPane.getTabCount()>0){
            int tpn=getSelectedTextPaneNumber();
            if(saveFile(tpn)==true){
                Compile obj=new Compile(textPaneFilePath[tpn],selectedLanguage);
                errorTextArea.setText(obj.compile());
                consoleTabbedPane.setSelectedIndex(0);
                timeTextArea.setText("");
                outputTextArea.setText("");//clear the fields
            }
        }
        else{   //HANDLE THIS----MAYBE WITH A POPUP
        }
    }//GEN-LAST:event_compileButtonActionPerformed

    public ICE(GraphicsConfiguration gc) {
        super(gc);
    }
    
    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {
        String fileName="Temp.txt";
        inputPath="";
        FileWriter fw = null;
        try {
            File file = new File(fileName);
            fw = new FileWriter(file);
            fw.write(inputTextArea.getText());  //put output of last time into file
            fw.flush();
            fw.close();
            inputPath=file.getAbsolutePath();
        }catch (IOException ex) {
            Logger.getLogger(ICE.class.getName()).log(Level.SEVERE, null, ex);
        }
        //pass input file path to SwingWorker Thread
        RunWorker rw=new RunWorker();
        workerThread=rw;
        rw.execute();
   }                                         

    public class RunWorker extends SwingWorker<String, String>{
       
        @Override
        protected String doInBackground() throws Exception {
            
            compileButton.setEnabled(false);
            runButton.setEnabled(false);
            runipButton.setEnabled(false);
            genopButton.setEnabled(false);
            
            timeTextArea.setText("");
            outputTextArea.setText("");
            errorTextArea.setText("");
            
            if(editorTabbedPane.getTabCount()>0){
                int tpn=getSelectedTextPaneNumber();
                if(saveFile(tpn)==true){
                    Compile obj=new Compile(textPaneFilePath[tpn],inputPath,claTextField.getText(),selectedLanguage);
                    String str=obj.compile();
                    errorTextArea.setText(str);
                    consoleTabbedPane.setSelectedIndex(0);
            
                    if( !(str.contains("error") || str.contains("exit status") || str.contains("invalid flag") || str.contains("Error")) )//DO IT FOR JAVA ALSO
                    {   //if file compiled successfully
                        String str1=obj.runError();
                        if(Thread.interrupted())    //if terminate is called still the whole process runs in background...so in that case dont fill the fields
                           return null;
                        errorTextArea.append(str1);
                        outputTextArea.setText(obj.runOutput());
                        timeTextArea.setText(obj.getTime());
                        if(str1.length()==1)//if file runs successfully
                            consoleTabbedPane.setSelectedIndex(2);  
                    }
                }
            }
            else{
            }
            return null;
        }
        
        @Override
        protected void done(){  //it runs in EDT not in worker thread
            compileButton.setEnabled(true);
            runButton.setEnabled(true);
            runipButton.setEnabled(true);
            genopButton.setEnabled(true);
        }
    }
    
    private void undoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoMenuItemActionPerformed
        int tpn=getSelectedTextPaneNumber();
        if(undomgr[tpn].canUndo())
            undomgr[tpn].undo();
    }//GEN-LAST:event_undoMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        //ASK FOR SAVING UNSAVED FILE---POP UP
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void newMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuItemActionPerformed
        int tbn=tabNumber;
        tabNumber++;
        createNewTextPane(tbn,"New Tab");
        setTextPaneProperties(tbn,"");    //filepath=null
        ((DefaultStyledDocument)editorTextPane[tbn].getDocument()).setDocumentFilter(new MyDocumentFilter());
        //DISPLAY LINE NUMBER
    }//GEN-LAST:event_newMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        int returnVal = fileChooser1.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser1.getSelectedFile();
            try {
                int tbn=tabNumber;
                tabNumber++;
                createNewTextPane(tbn,file.getName());
                editorTextPane[tbn].read(new FileReader(file.getAbsolutePath()),null);
                setTextPaneProperties(tbn,file.getAbsolutePath());
                ((DefaultStyledDocument)editorTextPane[tbn].getDocument()).setDocumentFilter(new MyDocumentFilter());//for coloring
            } catch (IOException ex) {
            //System.out.println("problem accessing file"+file.getAbsolutePath());
            }
        }
        else {
         //System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void closeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeMenuItemActionPerformed
        int curTab=editorTabbedPane.getSelectedIndex();
        //ask for saving---popup
        if(curTab>=0)
            editorTabbedPane.remove(curTab);
    }//GEN-LAST:event_closeMenuItemActionPerformed

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        if(editorTabbedPane.getTabCount()>0){
            int tpn=getSelectedTextPaneNumber(),curTab=editorTabbedPane.getSelectedIndex();
            fileChooser2.setDialogTitle("Save As");
            int returnVal = fileChooser2.showSaveDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File f = fileChooser2.getSelectedFile();//POP UP---FILE ALREADY EXIST--REPLACE???
                FileWriter fw = null;
                try {
                    File file = new File(f.getAbsolutePath());
                    String fileData=editorTextPane[tpn].getText();
                    fw = new FileWriter(file);
                    fw.write(fileData);
                    fw.flush();
                    fw.close();
                    editorTabbedPane.setTitleAt(curTab,file.getName());
                    textPaneFilePath[tpn]=f.getAbsolutePath();
                    } catch (IOException ex) {
                        Logger.getLogger(ICE.class.getName()).log(Level.SEVERE, null, ex);
                }
            }//handle textPaneFilePath[]
        }
        else{   //HANDLE THIS WITH POP-UP
        }
    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    private void genopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genopButtonActionPerformed
        int returnVal = fileChooser3.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser3.getSelectedFile();//POP UP---FILE ALREADY EXIST--REPLACE???
            FileWriter fw = null;
            try {
                File file = new File(f.getAbsolutePath());
                fw = new FileWriter(file);
                fw.write(outputTextArea.getText());  //put output of last time into file
                fw.flush();
                fw.close();
                int tbn=tabNumber;
                tabNumber++;
                createNewTextPane(tbn,file.getName());
                editorTextPane[tbn].read( new FileReader( file.getAbsolutePath() ), null );
                setTextPaneProperties(tbn,file.getAbsolutePath());
            }catch (IOException ex) {
                Logger.getLogger(ICE.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_genopButtonActionPerformed

    private void runipButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runipButtonActionPerformed
        inputPath=inpFileTextField.getText();
        //pass input file path to SwingWorker Thread
        RunWorker rw=new RunWorker();
        workerThread=rw;
        rw.execute();
    }//GEN-LAST:event_runipButtonActionPerformed

    private void templateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_templateButtonActionPerformed
        JFileChooser fileChooser4=new JFileChooser(templatePath);
        
        fileChooser4.setDialogTitle("Choose Template");
        fileChooser4.setPreferredSize(new java.awt.Dimension(750, 500));
        fileChooser4.addChoosableFileFilter(new TextCustomFilter());
        fileChooser4.addChoosableFileFilter(new CppCustomFilter());
        fileChooser4.addChoosableFileFilter(new JavaCustomFilter());
        
        int returnVal = fileChooser4.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser4.getSelectedFile();
            try {
                int tbn=tabNumber;
                tabNumber++;
                createNewTextPane(tbn,file.getName());
                editorTextPane[tbn].read( new FileReader( file.getAbsolutePath() ), null );
                setTextPaneProperties(tbn,file.getAbsolutePath());
                ((DefaultStyledDocument)editorTextPane[tbn].getDocument()).setDocumentFilter(new MyDocumentFilter());
            } catch (IOException ex) {
            //System.out.println("problem accessing file"+file.getAbsolutePath());
            }
        }
        else {
         //System.out.println("File access cancelled by user.");
        }
        
    }//GEN-LAST:event_templateButtonActionPerformed

    private void browseipButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseipButtonActionPerformed
        int returnVal = fileChooser5.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            inputFile = fileChooser5.getSelectedFile();
            inpFileTextField.setText(inputFile.getAbsolutePath());
        } else {
            //System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_browseipButtonActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        if(editorTabbedPane.getTabCount()>0){
            saveFile(getSelectedTextPaneNumber());
        }
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void genipButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genipButtonActionPerformed
        File file=new File("inputFile.txt");
        int tbn=tabNumber;
        tabNumber++;
        createNewTextPane(tbn,file.getName());
        setTextPaneProperties(tbn,file.getAbsolutePath());
        inpFileTextField.setText(file.getAbsolutePath());
        inputFile=file;
        //DISPLAY LINE NUMBER
    }//GEN-LAST:event_genipButtonActionPerformed

    private void redoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoMenuItemActionPerformed
        int tpn=getSelectedTextPaneNumber();
        if(undomgr[tpn].canRedo())
            undomgr[tpn].redo();
    }//GEN-LAST:event_redoMenuItemActionPerformed

    private void browseTemplateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseTemplateButtonActionPerformed
        int returnVal=fileChooser6.showOpenDialog(this);
        if (returnVal==JFileChooser.APPROVE_OPTION) {
            templateFolder=fileChooser6.getSelectedFile();
            templatePath=templateFolder.getAbsolutePath();
            templateTextField.setText(templatePath);
        } else {
            //System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_browseTemplateButtonActionPerformed

    private void readmeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readmeMenuItemActionPerformed
        int tbn=tabNumber;
        tabNumber++;
        createNewTextPane(tbn,"Readme");
        editorTextPane[tbn].setFont(new Font(Font.SANS_SERIF,Font.PLAIN,14));
        Readme obj1=new Readme();
        editorTextPane[tbn].setText(obj1.getReadmeMessage());
        editorTextPane[tbn].setEditable(false);
        editorTextPane[tbn].setCaretPosition(0);
        editorTabbedPane.setSelectedIndex(editorTabbedPane.getTabCount()-1);
    }//GEN-LAST:event_readmeMenuItemActionPerformed

    private void aboutMeMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMeMenuItem1ActionPerformed
        JTextPane textpane=new JTextPane();
        textpane.setEditable(false);
        Readme obj1=new Readme();
        textpane.setText(obj1.getAboutMessage());
        
        StyledDocument doc = textpane.getStyledDocument();    //to align text in center
        SimpleAttributeSet center = new SimpleAttributeSet();
        StyleConstants.setAlignment(center, StyleConstants.ALIGN_CENTER);
        doc.setParagraphAttributes(0, doc.getLength(), center, false);
        
        //to use image in distributable jar,add image folder to (ICE->properties->sources->add folder)
        URL url= Main.class.getResource("/123.jpg");
        JOptionPane.showMessageDialog(basePanel,textpane,"About",JOptionPane.PLAIN_MESSAGE,new ImageIcon(url)); 
    }//GEN-LAST:event_aboutMeMenuItem1ActionPerformed

    private void terminateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_terminateButtonActionPerformed
        workerThread.cancel(true);
        
        timeTextArea.setText("");
        outputTextArea.setText("");
        errorTextArea.setText("");
    }//GEN-LAST:event_terminateButtonActionPerformed

    
    
    private void langComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_langComboBoxActionPerformed
        JComboBox cb=(JComboBox)evt.getSource();
        String lang=(String)cb.getSelectedItem();
        selectedLanguage=lang;
    }//GEN-LAST:event_langComboBoxActionPerformed

    private void themesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_themesMenuItemActionPerformed
        updateLAF("com.alee.laf.WebLookAndFeel");
    }//GEN-LAST:event_themesMenuItemActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            int flag=0;
            
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("GTK+".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    flag=1;
                    break;
                }
            }
            if(flag==0){
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    System.out.println(info.getName());
                    /*if ("Windows".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        flag=1;
                        break;
                    }*/
                }
            }
            if(flag==0){
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        flag=1;
                        break;
                    }
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ICE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ICE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ICE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ICE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ICE().setVisible(true);
            }
        });
    }
    
    static int MAX=256,tabNumber=0,changeFlag[]=new int[MAX];
    JTextPane editorTextPane[]=new JTextPane[MAX];
    JScrollPane editorScrollPane[]=new JScrollPane[MAX];
    String selectedLanguage="C",textPaneFilePath[]=new String[MAX],templatePath="",inputPath="";
    File inputFile=null,sourceCode=null,templateFolder=null;
    JMenuItem cutMenuItem,copyMenuItem,pasteMenuItem;
    protected UndoManager undomgr[]=new UndoManager[MAX];
    RunWorker workerThread=new RunWorker();
    
    //REMOVE TITLE BAR OF EDITOR INTERNAL FRAME
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMeMenuItem1;
    private javax.swing.JPanel basePanel;
    private javax.swing.JButton browseTemplateButton;
    private javax.swing.JButton browseipButton;
    private javax.swing.JLabel claLabel;
    private javax.swing.JTextField claTextField;
    private javax.swing.JMenuItem closeMenuItem;
    private javax.swing.JButton compileButton;
    private javax.swing.JInternalFrame consoleInternalFrame;
    private javax.swing.JScrollPane consoleScrollPane;
    private javax.swing.JTabbedPane consoleTabbedPane;
    private javax.swing.JMenu editMenu;
    private javax.swing.JInternalFrame editorInternalFrame;
    private javax.swing.JTabbedPane editorTabbedPane;
    private javax.swing.JTextArea errorTextArea;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JFileChooser fileChooser1;
    private javax.swing.JFileChooser fileChooser2;
    private javax.swing.JFileChooser fileChooser3;
    private javax.swing.JFileChooser fileChooser5;
    private javax.swing.JFileChooser fileChooser6;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton genipButton;
    private javax.swing.JButton genopButton;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel inpFileLabel;
    private javax.swing.JTextField inpFileTextField;
    private javax.swing.JTextArea inputTextArea;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.ButtonGroup langButtonGroup;
    private javax.swing.JComboBox langComboBox;
    private javax.swing.JPanel langPanel;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JMenuItem newMenuItem;
    private javax.swing.JLabel notesLabel;
    private javax.swing.JTextArea notesTextArea;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JTextArea outputTextArea;
    private javax.swing.JMenuItem readmeMenuItem;
    private javax.swing.JMenuItem redoMenuItem;
    private javax.swing.JButton runButton;
    private javax.swing.JPanel runPanel;
    private javax.swing.JButton runipButton;
    private javax.swing.JPanel runipPanel;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JButton templateButton;
    private javax.swing.JLabel templateLabel;
    private javax.swing.JTextField templateTextField;
    private javax.swing.JButton terminateButton;
    private javax.swing.JMenuItem themesMenuItem;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JPanel timePanel;
    private javax.swing.JScrollPane timeScrollPane;
    private javax.swing.JTextArea timeTextArea;
    private javax.swing.JMenuItem undoMenuItem;
    private javax.swing.JMenu viewMenu;
    // End of variables declaration//GEN-END:variables

    private int getSelectedTextPaneNumber(){
        int i;
        for(i=0;i<MAX;i++)
        if(editorTabbedPane.getSelectedComponent()==editorScrollPane[i])
            return i;
        return -1;   //THIS CASE IS TO BE HANDLED
    }
    private boolean saveFile(int tpn){
        int curTab=editorTabbedPane.getSelectedIndex();
        FileWriter fw = null;
        if("".equals(textPaneFilePath[tpn])) //file not saved
        {
            fileChooser2.setDialogTitle("Save");
            int returnVal = fileChooser2.showSaveDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File f = fileChooser2.getSelectedFile();//POP UP---FILE ALREADY EXIST--REPLACE???
                try {
                    File file = new File(f.getAbsolutePath());
                    String fileData=editorTextPane[tpn].getText();
                    fw = new FileWriter(file);
                    fw.write(fileData);
                    fw.flush();
                    fw.close();
                    editorTabbedPane.setTitleAt(curTab,file.getName());
                    textPaneFilePath[tpn]=f.getAbsolutePath();
                    return true;
                    } catch (IOException ex) {
                        Logger.getLogger(ICE.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        else        //file already saved
        {
            try {
                File file = new File(textPaneFilePath[tpn]);
                String fileData=editorTextPane[tpn].getText();
                fw = new FileWriter(file);
                fw.write(fileData);
                fw.flush();
                fw.close();
                editorTabbedPane.setTitleAt(curTab,file.getName());
                changeFlag[tpn]=0;//no unsaved changes
                return true;
                } catch (IOException ex) {
                    Logger.getLogger(ICE.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return false;
    }
    
    private void createNewTextPane(int tbn,String tabName){
        editorTextPane[tbn]=new JTextPane();
        editorScrollPane[tbn]=new JScrollPane();
        editorScrollPane[tbn].setViewportView(editorTextPane[tbn]);
        editorTabbedPane.addTab(tabName, editorScrollPane[tbn]);
    }
    private void setTextPaneProperties(int tbn,String filepath){
        textPaneFilePath[tbn]=filepath;   //path of that file(if saved)
        editorTextPane[tbn].requestFocus();
        //editorTextPane[tbn].setTabSize(4);
        //editorTextPane[tbn].setLineWrap(true);
        //editorTextPane[tbn].setWrapStyleWord(true);
        editorTextPane[tbn].setFont(new Font(Font.SANS_SERIF,Font.PLAIN,14));
        editorTextPane[tbn].getDocument().putProperty(DefaultEditorKit.EndOfLineStringProperty, "\n");
        changeFlag[tbn]=0;    //no unsaved changes in file
        editorTextPane[tbn].getDocument().addDocumentListener(new MyDocumentListener());
        undomgr[tbn]=new UndoManager();
        undomgr[tbn].setLimit(5000);
        editorTextPane[tbn].getDocument().addUndoableEditListener(undomgr[tbn]);//(new MyUndoableEditListener());
        editorTabbedPane.setSelectedIndex(editorTabbedPane.getTabCount()-1);
    }
    
    private void addCutMenuItem(){
        cutMenuItem = new javax.swing.JMenuItem(new DefaultEditorKit.CutAction());
        cutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);
    }
    private void addCopyMenuItem(){
        copyMenuItem = new javax.swing.JMenuItem(new DefaultEditorKit.CopyAction());
        copyMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);
    }
    private void addPasteMenuItem(){
        pasteMenuItem = new javax.swing.JMenuItem(new DefaultEditorKit.PasteAction());
        pasteMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);
    }
    
    class TextCustomFilter extends javax.swing.filechooser.FileFilter {
        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with ".txt" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith(".txt");
        }
        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            return "Text documents (*.txt)";
        }
    }
    class CppCustomFilter extends javax.swing.filechooser.FileFilter {
        @Override
        public boolean accept(File file) {
            return file.isDirectory() || file.getAbsolutePath().endsWith(".c") || file.getAbsolutePath().endsWith(".cpp");
        }
        @Override
        public String getDescription() {return "C and C++ Files (*.c / *.cpp)"; }
    }
    class JavaCustomFilter extends javax.swing.filechooser.FileFilter {
        @Override
        public boolean accept(File file) {return file.isDirectory() || file.getAbsolutePath().endsWith(".java");}
        @Override
        public String getDescription() {return "Java Files (*.java)";}
    }
    
    class MyDocumentListener implements DocumentListener {
        public void insertUpdate(DocumentEvent e) {
            //System.out.println("in="+e.getLength());
            fun();
        }
        public void removeUpdate(DocumentEvent e) {
            //System.out.println("rm="+e.getLength());
            fun();
        }
        public void changedUpdate(DocumentEvent e) {
            //System.out.println("ch="+e.getLength());
            //Plain text components don't fire these events.
        }
        void fun(){
            if(changeFlag[getSelectedTextPaneNumber()]==0)  //no unsaved changes in file
            {
                int curTab=editorTabbedPane.getSelectedIndex();
                String tempTitle=editorTabbedPane.getTitleAt(curTab);
                editorTabbedPane.setTitleAt(curTab,'*'+tempTitle);
                changeFlag[getSelectedTextPaneNumber()]=1;  //file has unsaved changes
            }
        }
    }
    class MyDocumentFilter extends DocumentFilter{
        int offset1,length1;
        public void insertString(DocumentFilter.FilterBypass fb,int offset,String string,AttributeSet attr) throws BadLocationException {
            if(string.isEmpty())
                fb.insertString(offset,string,attr);       
            else{
                super.insertString(fb,offset,string,attr);   
                offset1=offset;
                length1=string.length()+offset;
                //System.out.println(string.length());
                //System.out.println("Offset: "+offset1+" Length: "+length1);
                //LangKeywords obj=new LangKeywords();
                //obj.highlight(editorTextPane[getSelectedTextPaneNumber()],selectedLanguage);
            }
        }
        public void remove(DocumentFilter.FilterBypass fb,int offset,int length) throws BadLocationException {
            if (length==0)     
                fb.remove(offset,length);      
            else { 
                super.remove(fb,offset,length);      
                offset1=offset;  
                length1=length;  
                //System.out.println("Offset1: "+offset1+" Length1: "+length1);  
                //LangKeywords obj=new LangKeywords();
                //obj.highlight(editorTextPane[getSelectedTextPaneNumber()],selectedLanguage);    
          }      
        }      
        public void replace(DocumentFilter.FilterBypass fb,int offset,int length,String text,AttributeSet attrs)throws BadLocationException {      
            if (length==0 && text.isEmpty())      
                fb.replace(offset,length,text,attrs);      
            else{      
                super.replace(fb,offset,length,text,attrs);      
                offset1=offset;  
                length1=length;  
                //System.out.println("Offset2: "+offset1+" Length2: "+length1+" String: "+text);  
                //LangKeywords obj=new LangKeywords();
                //obj.highlight(editorTextPane[getSelectedTextPaneNumber()],selectedLanguage);
            }
            if(text.equals("\n"))   //auto indentation
                autoIndent(offset);
        }
        
        void autoIndent(int offset){
            String str=editorTextPane[getSelectedTextPaneNumber()].getText();
            int i,pos=offset-1,tabcount;
            while(pos>=0){  // traverse until u go to previous line's end or start of text
                if(str.charAt(pos)=='\n')
                    break;
                pos--;
            }
            tabcount=0;     //count no. of tabs from start of line
            for(i=pos+1;i<offset;i++){
                if(str.charAt(i)!='\t')
                    break;
                tabcount++;
            }
            String str3="";
            for(i=0;i<tabcount;i++)     //string made of tabs
                str3=str3+'\t';
            try {
                editorTextPane[getSelectedTextPaneNumber()].getStyledDocument().insertString(offset+1, str3, null);
            } catch (BadLocationException ex) {
                Logger.getLogger(ICE.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    /*StyleContext sc=StyleContext.getDefaultStyleContext();
    AttributeSet aset=sc.addAttribute(SimpleAttributeSet.EMPTY,StyleConstants.Foreground,Color.red);
    editorTextPane[getSelectedTextPaneNumber()].getStyledDocument().setCharacterAttributes(0,20,aset,true);*/
    
    //protected UndoManager undo = new UndoManager();
    //doc.addUndoableEditListener(new MyUndoableEditListener());
    
    public static void updateLAF(String value) {
        if (UIManager.getLookAndFeel().getClass().getName().equals(value)) {
            return;
        }
        try {
            UIManager.setLookAndFeel(value);
            for (Frame frame : Frame.getFrames()) {
                updateLAFRecursively(frame);
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e) {
        }
    }

    public static void updateLAFRecursively(Window window) {
        for (Window childWindow : window.getOwnedWindows()) {
            updateLAFRecursively(childWindow);
        }
        SwingUtilities.updateComponentTreeUI(window);
    }
}
